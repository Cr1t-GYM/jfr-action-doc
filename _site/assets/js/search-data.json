{"0": {
    "doc": "How to contribute to the actions repos",
    "title": "How to contribute to the actions repos",
    "content": ". | Firstly, you need to fork the action repository which you want to contribute. | Make changes to the current logic and add readable comments where and when it’s necessary. | You will need to add integration tests which can trigger your logic. The integration tests can be added in the workflow definition stored in the .github/workflows directory. | When you submit the PR for the action codes, you will need to list out the reasons for these changes and their influences. | You also need to add related documentation PR in the documentation repository. For example, if you add a new option for a specific action, you need to describe the new added input in the documentation. | The README.md in the action repository should only contain just enough material for the users to start using your work. If you think it’s necessary to make changes in the README.md, you can make a commit with your action codes. | . ",
    "url": "http://localhost:4000/docs/developer-guide/action-contribution.html",
    "relUrl": "/docs/developer-guide/action-contribution.html"
  },"1": {
    "doc": "Actions Comparisons",
    "title": "Actions Comparisons",
    "content": "We only compare jfr-container-action, jfr-static-image-action and jenkinsfile-runner-action here. jenkins-setup and jenkins-plugin-installation-action are only used to set up the environment. | Comparables | jfr-container-action | jfr-static-image-action | jenkinsfile-runner-action | . | Do they run in the Jenkins container or run in the host machine? | It runs in the Jenkins container | It runs in the Jenkins container | It runs in the host machine directly | . | When will the Jenkins container start in users workflow? | It will start before all the actions start | It will start when jfr-static-image-action starts | N/A | . | When will the Jenkins container end in users workflow? | It will end after all the actions end | It will end immediately after jfr-static-image-action ends | N/A | . | Can it be used with other GitHub actions? | Yes | No, except actions/checkout to set up workspace | Yes | . | Prerequisites | Needs to refer ghcr.io/jenkinsci/jenkinsfile-runner:master or its extended images | No | Needs to set up the environment by jenkins-setup. If you want to download extra plugins, you need to run jenkins-plugin-installation-action | . | Do they support installing new plugins? | Yes | Yes | New plugins needs to be installed by jenkins-plugin-installation-action | . | Do they support using configuraion-as-code-plugin? | Yes | Yes | Yes | . | Valid Environment Variables in the action | No Constraints | Must be started with JENKINS_ | No Constraints | . | What kind of runners do it support? | Linux | Linux | Linux, macOS, Windows | . ",
    "url": "http://localhost:4000/docs/user-guide/actions-cmp.html",
    "relUrl": "/docs/user-guide/actions-cmp.html"
  },"2": {
    "doc": "Advanced usage",
    "title": "Advanced usage",
    "content": " ",
    "url": "http://localhost:4000/docs/user-guide/advanced-usage.html",
    "relUrl": "/docs/user-guide/advanced-usage.html"
  },"3": {
    "doc": "Advanced usage",
    "title": "Table of contents",
    "content": ". | Cache new installed plugins | Pipeline log uploading service | Use your own base image as runtime | . ",
    "url": "http://localhost:4000/docs/user-guide/advanced-usage.html#table-of-contents",
    "relUrl": "/docs/user-guide/advanced-usage.html#table-of-contents"
  },"4": {
    "doc": "Advanced usage",
    "title": "Cache new installed plugins",
    "content": "This feature is only available in jfr-container-action. By default, the plugins specified by plugins.txt will be downloaded from the Internet everytime you run the workflow. In order to accelarate the workflow, you can use actions/cache outside and give its cache hit status as input in isPluginCacheHit. There are three important details here. | The path input in actions/cache must be /jenkins_new_plugins. | If you want to use plugins.txt as key for cache, you need to keep the key input in actions/cache consistent with pluginstxt input in jfr-container-action. | You need to pass cache hit status by isPluginCacheHit. For example, ff the step id of your actions/cache step is cache-jenkins-plugins, the input of isPluginCacheHit should be ${{steps.cache-jenkins-plugins.outputs.cache-hit}}. | . # Cache new plugins in /jenkins_new_plugins by hash(plugins.txt) - uses: actions/cache@v3 id: cache-jenkins-plugins name: Cache Jenkins plugins with: path: /jenkins_new_plugins key: ${{ runner.os }}-plugins-${{ hashFiles('plugins.txt') }} - name: Jenkins pipeline in the container id: jenkins_pipeline_container uses: Cr1t-GYM/jenkins-action-poc/jfr-container-action@master with: command: run jenkinsfile: Jenkinsfile pluginstxt: plugins.txt jcasc: jcasc.yml isPluginCacheHit: $ . ",
    "url": "http://localhost:4000/docs/user-guide/advanced-usage.html#cache-new-installed-plugins",
    "relUrl": "/docs/user-guide/advanced-usage.html#cache-new-installed-plugins"
  },"5": {
    "doc": "Advanced usage",
    "title": "Pipeline log uploading service",
    "content": "This feature is available for jfr-container-action and jfr-static-image-action. After you run the Jenkins pipeline, the pipeline log will be available in /jenkinsHome/jobs/job/builds for jfr-container-action and jenkinsHome/jobs/job/builds for jfr-static-image-action. Therefore, you are able to upload the log to the GitHub Action page by using actions/upload-artifact. Log uploading example for jfr-container-action. - name: Jenkins pipeline in the container id: jenkins_pipeline_container uses: Cr1t-GYM/jenkins-action-poc/jfr-container-action@master with: command: run jenkinsfile: Jenkinsfile pluginstxt: plugins_container.txt jcasc: jcasc.yml # Upload pipeline log in /jenkinsHome/jobs/job/builds - name: Upload pipeline Artifacts uses: actions/upload-artifact@v3 with: name: jenkins-container-pipeline-log path: /jenkinsHome/jobs/job/builds . Log uploading example for jfr-static-image-action. - name: Jenkins pipeline with the static image id: jenkins_pipeline_image uses: Cr1t-GYM/jenkins-action-poc/jfr-static-image-action@master with: command: run jenkinsfile: Jenkinsfile pluginstxt: plugins_container.txt jcasc: jcasc.yml # Upload pipeline log in jenkinsHome/jobs/job/builds - name: Upload pipeline Artifacts uses: actions/upload-artifact@v3 with: name: jenkins-static-image-pipeline-log path: jenkinsHome/jobs/job/builds . ",
    "url": "http://localhost:4000/docs/user-guide/advanced-usage.html#pipeline-log-uploading-service",
    "relUrl": "/docs/user-guide/advanced-usage.html#pipeline-log-uploading-service"
  },"6": {
    "doc": "Advanced usage",
    "title": "Use your own base image as runtime",
    "content": "This feature is only available in jfr-static-image-action. You can specify the base image in baseImage. For instance, if you want to use npm official image as the base runtime, you can specify ‘node:18.3.0’ as input and then you can use npm in your Jenkinsfile. An alternative way to implement is declaring in the JCasC. - name: Jenkins pipeline with the static image id: jenkins_pipeline_base_image uses: ./jfr-static-image-action env: JENKINS_AWS_KEY: 123456 with: command: run jenkinsfile: Jenkinsfile pluginstxt: plugins_container.txt jcasc: jcasc.yml baseImage: 'node:18.3.0' . ",
    "url": "http://localhost:4000/docs/user-guide/advanced-usage.html#use-your-own-base-image-as-runtime",
    "relUrl": "/docs/user-guide/advanced-usage.html#use-your-own-base-image-as-runtime"
  },"7": {
    "doc": "Background information",
    "title": "Background information",
    "content": "Jenkinsfile Runner Action for GitHub Actions provides the customized containerized environment and useful GitHub Actions for users to run the Jenkins pipeline inside GitHub Actions. In more detail, if using these actions, any GitHub project which has a Jenkinsfile can execute its workflow in the GitHub Actions runner. It aims at applying Jenkins in the GitHub Actions in a Function-as-a-Service context. This feature is based on the Jenkinsfile Runner, which is a command line tool for the Jenkins pipeline execution engine. The user can define the Jenkins pipeline environment by choosing different base images and configuring the Jenkins Configuration-as-Code plugin. Now we have 5 different actions. The jenkins-setup and jenkins-plugin-installation-action are only used to set up the jenkins environment, while jenkinsfile-runner-action, jfr-container-action and jfr-static-image-action can run the pipeline. The jenkins-setup, jenkins-plugin-installation-action and jenkinsfile-runner-action work as a whole to start the pipeline in the host machine directly. On the other hand, jfr-container-action and jfr-static-image-action run the pipeline in the customized container. ",
    "url": "http://localhost:4000/docs/developer-guide/background-information.html",
    "relUrl": "/docs/developer-guide/background-information.html"
  },"8": {
    "doc": "How to contribute to the demo repo",
    "title": "How to contribute to the demo repo",
    "content": ". | Firstly, you need to fork the demo repository. | When you add the new demo, you need to follow the structure of the current demo repository. For example, if the new demo is called “foo”, you need to create a new folder called “foo” under the demo directory. | You will need to add a specific README.md in the new demo directory. | You will need to add a short description about this new demo in the repository main README.md, which can be found in the root path of the directory. | . ",
    "url": "http://localhost:4000/docs/developer-guide/demo-contribution.html",
    "relUrl": "/docs/developer-guide/demo-contribution.html"
  },"9": {
    "doc": "Demo",
    "title": "A small demo about how to use these actions",
    "content": "The Demo project can teach you how to build a SpringBoot project with these actions. ",
    "url": "http://localhost:4000/docs/user-guide/demo.html#a-small-demo-about-how-to-use-these-actions",
    "relUrl": "/docs/user-guide/demo.html#a-small-demo-about-how-to-use-these-actions"
  },"10": {
    "doc": "Demo",
    "title": "Demo",
    "content": " ",
    "url": "http://localhost:4000/docs/user-guide/demo.html",
    "relUrl": "/docs/user-guide/demo.html"
  },"11": {
    "doc": "Developer Guide",
    "title": "Developer Guide",
    "content": "This is the developer guide. ",
    "url": "http://localhost:4000/developer-guide",
    "relUrl": "/developer-guide"
  },"12": {
    "doc": "Developer Guide",
    "title": "Repository structure explanations",
    "content": "We have 5 repositories for 5 different actions, 1 repository for hosting documentations and 1 repository for demos. These actions are jenkins-setup, jenkins-plugin-installation-action, jenkinsfile-runner-action, jfr-container-action and jfr-static-image-action. | jenkins-setup repository | jenkins-plugin-installation-action repository | jenkinsfile-runner-action repository | jfr-container-action repository | jfr-static-image-action repository | documentation repository | demo repository | . ",
    "url": "http://localhost:4000/developer-guide#repository-structure-explanations",
    "relUrl": "/developer-guide#repository-structure-explanations"
  },"13": {
    "doc": "Example workflows",
    "title": "Example workflows",
    "content": " ",
    "url": "http://localhost:4000/docs/user-guide/example-workflows.html",
    "relUrl": "/docs/user-guide/example-workflows.html"
  },"14": {
    "doc": "Example workflows",
    "title": "Table of contents",
    "content": ". | Container job action | Docker container action | Runtime action | . There are three common cases about how to play with these actions. Although the user interfaces are similar to each other, there are still some subtle differences. The runtime actions are deprecated now. The users can use the jfr-container-action and jfr-static-image-action. ",
    "url": "http://localhost:4000/docs/user-guide/example-workflows.html#table-of-contents",
    "relUrl": "/docs/user-guide/example-workflows.html#table-of-contents"
  },"15": {
    "doc": "Example workflows",
    "title": "Container job action",
    "content": "This case is realized by jfr-container-action. If the job uses this action, it will run the Jenkins pipeline and other GitHub Actions in the prebuilt container provided by ghcr.io/jenkinsci/jenkinsfile-runner:master. The extra prerequisite of this action is that you need to declare the image usage of ghcr.io/jenkinsci/jenkinsfile-runner:master at the start of the job. name: Java CI on: [push] jobs: jenkins-container-pipeline: runs-on: ubuntu-latest name: jenkins-prebuilt-container-test container: # prerequisite image: ghcr.io/jenkinsci/jenkinsfile-runner:master steps: - uses: actions/checkout@v2 # jfr-container-action - name: Jenkins pipeline in the container id: jenkins_pipeline_container uses: Cr1t-GYM/jenkins-action-poc/jfr-container-action@master with: command: run jenkinsfile: Jenkinsfile pluginstxt: plugins.txt jcasc: jcasc.yml . Some users might want to configure the container environment. The recommendation is that you should extend the ghcr.io/jenkinsci/jenkinsfile-runner:master vanilla image and then you need to build and push it to your own registry. Finally, you can replace the vanilla image with your own custimized image. The invocation of jfr-container-action can be done in a similar way. name: Java CI on: [push] jobs: jenkins-container-pipeline: runs-on: ubuntu-latest name: jenkins-prebuilt-container-test container: # prerequisite: extendance of ghcr.io/jenkinsci/jenkinsfile-runner:master image: path/to/your_own_image steps: - uses: actions/checkout@v2 # jfr-container-action - name: Jenkins pipeline in the container id: jenkins_pipeline_container uses: Cr1t-GYM/jenkins-action-poc/jfr-container-action@master with: command: run jenkinsfile: Jenkinsfile pluginstxt: plugins.txt jcasc: jcasc.yml . ",
    "url": "http://localhost:4000/docs/user-guide/example-workflows.html#container-job-action",
    "relUrl": "/docs/user-guide/example-workflows.html#container-job-action"
  },"16": {
    "doc": "Example workflows",
    "title": "Docker container action",
    "content": "This case is realized by jfr-static-image-action. This action has its own working environment. It won’t have extra environment relationship with the on demand VM outside unless the user mounts other directories to the container (For example, checkout action if exists). After the docker action ends, this container will be deleted. The users may check the introduction of Docker container action before using this action. name: Java CI on: [push] jobs: jenkins-static-image-pipeline: runs-on: ubuntu-latest name: jenkins-static-image-pipeline-test steps: - uses: actions/checkout@v2 # jfr-static-image-action - name: Jenkins pipeline with the static image id: jenkins_pipeline_image uses: Cr1t-GYM/jenkins-action-poc/jfr-static-image-action@master with: command: run jenkinsfile: Jenkinsfile pluginstxt: plugins.txt jcasc: jcasc.yml . ",
    "url": "http://localhost:4000/docs/user-guide/example-workflows.html#docker-container-action",
    "relUrl": "/docs/user-guide/example-workflows.html#docker-container-action"
  },"17": {
    "doc": "Example workflows",
    "title": "Runtime action",
    "content": "This case is realized by the combination of jenkins-setup, jenkins-plugin-installation-action and jenkinsfile-runner-action. It will download all the dependencies and run the pipeline at the host machine directly. Its advantage is that it can support Linux, macOS and Windows runners. Its main disadvantage is the possibility of suffering from a plugins.jenkins.io outage. name: Java CI on: [push] jobs: jenkins-runtime-pipeline: # Run all the actions in the on demand VM. needs: syntax-check strategy: matrix: os: [ubuntu-latest, macOS-latest, windows-latest] runs-on: $ name: jenkins-runtime-pipeline-test steps: - uses: actions/checkout@v2 - name : Setup Jenkins uses: Cr1t-GYM/jenkins-action-poc/jenkins-setup - name: Jenkins plugins download id: jenkins_plugins_download uses: Cr1t-GYM/jenkins-action-poc/jenkins-plugin-installation-action with: pluginstxt: jenkins-setup/plugins.txt - name: Run Jenkins pipeline id: run_jenkins_pipeline uses: Cr1t-GYM/jenkins-action-poc/jenkinsfile-runner-action with: command: run jenkinsfile: Jenkinsfile jcasc: jcasc.yml . ",
    "url": "http://localhost:4000/docs/user-guide/example-workflows.html#runtime-action",
    "relUrl": "/docs/user-guide/example-workflows.html#runtime-action"
  },"18": {
    "doc": "Home",
    "title": "Jenkinsfile-runner actions documentation",
    "content": "View it on GitHub . Hello Jenkinsfile-runner actions! . ",
    "url": "http://localhost:4000/#jenkinsfile-runner-actions-documentation",
    "relUrl": "/#jenkinsfile-runner-actions-documentation"
  },"19": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"20": {
    "doc": "Inputs",
    "title": "Inputs",
    "content": " ",
    "url": "http://localhost:4000/docs/user-guide/inputs.html",
    "relUrl": "/docs/user-guide/inputs.html"
  },"21": {
    "doc": "Inputs",
    "title": "Table of contents",
    "content": ". | Container Actions Inputs . | Shared Inputs of jfr-container-action and jfr-static-image-action | jfr-container-action Unique Inputs | jfr-static-image-action Unique Inputs | . | Runtime Actions Inputs . | jenkins-setup | jenkins-plugin-installation-action | jenkinsfile-runner-action | . | . ",
    "url": "http://localhost:4000/docs/user-guide/inputs.html#table-of-contents",
    "relUrl": "/docs/user-guide/inputs.html#table-of-contents"
  },"22": {
    "doc": "Inputs",
    "title": "Container Actions Inputs",
    "content": "Shared Inputs of jfr-container-action and jfr-static-image-action . These inputs are provided by our container actions. | Name | Type | Default Value | Description | . | command | String | run | The command to run the jenkinsfile-runner. The supported commands are run and lint. | . | jenkinsfile | String | Jenkinsfile | The relative path to Jenkinsfile. You can check the official manual about Jenkinsfile. | . | pluginstxt | String | plugins.txt | The relative path to plugins list file. You can check the valid plugin input format. You can also refer to the plugins.txt in this repository. | . | jcasc | String | N/A | The relative path to Jenkins Configuration as Code YAML file. You can refer to the demos provided by configuration-as-code-plugin and learn how to configure the Jenkins instance without using UI page. | . jfr-container-action Unique Inputs . | Name | Type | Default Value | Description | . | isPluginCacheHit | boolean | false | You can choose whether or not to cache new installed plugins outside. If users want to use actions/cache in the workflow, they can give the cache hit status as input in isPluginCacheHit. | . jfr-static-image-action Unique Inputs . | Name | Type | Default Value | Description | . | baseImage | String | N/A | You can choose your base runtime here. By default, it will pull the Jenkinsfile-runner jdk11 prebuilt container as runtime. | . ",
    "url": "http://localhost:4000/docs/user-guide/inputs.html#container-actions-inputs",
    "relUrl": "/docs/user-guide/inputs.html#container-actions-inputs"
  },"23": {
    "doc": "Inputs",
    "title": "Runtime Actions Inputs",
    "content": "jenkins-setup . | Name | Type | Default Value | Description | . | jenkins-version | String | 2.346.1 | The version of jenkins core to download. If you change the default value of jenkins-core-url, this option will be invalid. | . | jenkins-root | String | ./jenkins | The root directory of jenkins binaries storage. | . | jenkins-pm-version | String | 2.5.0 | The version of plugin installation manager to use. If you change the default value of jenkins-pm-url, this option will be invalid. | . | jfr-version | String | 1.0-beta-30 | The version of Jenkinsfile-runner to use. If you change the default value of jenkins-jfr-url, this option will be invalid. | . | jenkins-pm-url | String | plugin-installation-manager-tool GitHub release | The download url of plugin installation manager. | . | jenkins-core-url | String | Jenkins update center | The download url of Jenkins war package. | . | jenkins-jfr-url | String | Jenkinsfile-runner GitHub release | The download url of Jenkinsfile-runner. | . jenkins-plugin-installation-action . | Name | Type | Default Value | Description | . | pluginstxt | String | plugins.txt | The relative path to plugins list file. | . jenkinsfile-runner-action . | Name | Type | Default Value | Description | . | command | String | run | The command to run the jenkinsfile-runner. The supported commands are run and lint. | . | jenkinsfile | String | Jenkinsfile | The relative path to Jenkinsfile. | . | jcasc | String | N/A | The relative path to Jenkins Configuration as Code YAML file. | . ",
    "url": "http://localhost:4000/docs/user-guide/inputs.html#runtime-actions-inputs",
    "relUrl": "/docs/user-guide/inputs.html#runtime-actions-inputs"
  },"24": {
    "doc": "Prerequisites",
    "title": "Prerequisites",
    "content": "The users need to create the workflow definition under the .github/workflows directory. Refer to the example workflows for more details about these actions. ",
    "url": "http://localhost:4000/docs/user-guide/prerequisites.html",
    "relUrl": "/docs/user-guide/prerequisites.html"
  },"25": {
    "doc": "Step by step usage",
    "title": "Step by step usage",
    "content": " ",
    "url": "http://localhost:4000/docs/user-guide/step-by-step-usage.html",
    "relUrl": "/docs/user-guide/step-by-step-usage.html"
  },"26": {
    "doc": "Step by step usage",
    "title": "Table of contents",
    "content": ". | Container actions usage | Runtime actions usage | . ",
    "url": "http://localhost:4000/docs/user-guide/step-by-step-usage.html#table-of-contents",
    "relUrl": "/docs/user-guide/step-by-step-usage.html#table-of-contents"
  },"27": {
    "doc": "Step by step usage",
    "title": "Container actions usage",
    "content": ". | Prepare a Jenkinsfile in your repository. You can check the basic syntax of Jenkins pipeline definition. | Prepare a workflow definition under the .github/workflows directory. You can check the official manual for more details. | In your GitHub Action workflow definition, you need to follow these steps when calling other actions in sequence: . | Use a ubuntu runner for the job. jobs: job-name: runs-on: ubuntu-latest . | If you use jfr-container-action, you need to declare using the ghcr.io/jenkinsci/jenkinsfile-runner:master or any image extended it. If you use jfr-static-image-action, you can skip this step. jobs: job-name: runs-on: ubuntu-latest container: image: ghcr.io/jenkinsci/jenkinsfile-runner:master . | Call the actions/checkout@v2 to pull your codes into the runner. “Call” means uses in the workflow definition specifically. You can check the details about “uses” keyword. - uses: actions/checkout@v2 . | Call the Jenkinsfile-runner actions. | If you use jfr-container-action, you need to call Cr1t-GYM/jenkins-action-poc/jfr-container-action@master and give necessary inputs. uses: Cr1t-GYM/jenkins-action-poc/jfr-container-action@master with: command: run jenkinsfile: Jenkinsfile pluginstxt: plugins.txt jcasc: jcasc.yml . | If you use jfr-static-image-action, you need to call Cr1t-GYM/jenkins-action-poc/jfr-static-image-action@master and give necessary inputs. See the examples for these two actions. uses: Cr1t-GYM/jenkins-action-poc/jfr-container-action@master with: command: run jenkinsfile: Jenkinsfile pluginstxt: plugins.txt jcasc: jcasc.yml . | . | . | . ",
    "url": "http://localhost:4000/docs/user-guide/step-by-step-usage.html#container-actions-usage",
    "relUrl": "/docs/user-guide/step-by-step-usage.html#container-actions-usage"
  },"28": {
    "doc": "Step by step usage",
    "title": "Runtime actions usage",
    "content": ". | Prepare a Jenkinsfile in your repository. | Prepare a workflow definition under the .github/workflows directory. | In your GitHub Action workflow definition, you need to follow these steps when calling other actions in sequence: . | Use the runners you prefer. You can choose Linux, macOS or Windows. jobs: job-name: runs-on: ubuntu-latest . | Call the actions/checkout@v2 to pull your codes into the runner. jobs: job-name: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 . | Set up the Jenkins environment by using Cr1t-GYM/jenkins-action-poc/jenkins-setup@master. jobs: job-name: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uese: Cr1t-GYM/jenkins-action-poc/jenkins-setup@master . | Install extra plugins by using Cr1t-GYM/jenkins-action-poc/jenkins-plugin-installation-action@master. This step is optional. jobs: job-name: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uese: Cr1t-GYM/jenkins-action-poc/jenkins-setup@master - uses: Cr1t-GYM/jenkins-action-poc/jenkins-plugin-installation-action@master with: pluginstxt: jenkins-setup/plugins.txt . | Run the Jenkins pipeline by using Cr1t-GYM/jenkins-action-poc/jenkinsfile-runner-action@master. jobs: job-name: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uese: Cr1t-GYM/jenkins-action-poc/jenkins-setup@master - uses: Cr1t-GYM/jenkins-action-poc/jenkins-plugin-installation-action@master with: pluginstxt: jenkins-setup/plugins.txt - uses: Cr1t-GYM/jenkins-action-poc/jenkinsfile-runner-action@master with: command: run jenkinsfile: Jenkinsfile jcasc: jcasc.yml . | . | . ",
    "url": "http://localhost:4000/docs/user-guide/step-by-step-usage.html#runtime-actions-usage",
    "relUrl": "/docs/user-guide/step-by-step-usage.html#runtime-actions-usage"
  },"29": {
    "doc": "How to test the source code",
    "title": "How to test the source code",
    "content": "The action codes are difficult to debug because its running environment cannot be mocked locally. Therefore, the only method to see whether your code runs as expected is pushing the changes to GitHub and let GitHub Actions runners test them. Follow the steps below to debug your codes. | Fork the action repository you want to contribute. | Add changes to the current logic and push it to your forked repository. | For a specific action, you can add integration tests in the GitHub Action workflow definitions. They are stored in the .github/workflows directory. Remember you need to set up your tests correctly which can be triggered by a push so that you can see it run after you have pushed the changes. | After you have pushed the changes, you can visit the Actions page in your forked repository where you can see their full logs after it reaches the end of the run. | . ",
    "url": "http://localhost:4000/docs/developer-guide/test-change.html",
    "relUrl": "/docs/developer-guide/test-change.html"
  },"30": {
    "doc": "User Guide",
    "title": "User guide",
    "content": "Jenkinsfile Runner Action for GitHub Actions aims at providing one-time runtime context for Jenkins pipeline. The users are able to run the pipeline in GitHub Actions by only providing the Jenkinsfile and the definition of GitHub workflow. This project is powered by jenkinsfile-runner mainly. The plugin downloading step is powered by plugin-installation-manager-tool. You can configure the pipeline environment by using other GitHub Actions or providing JCasC Yaml file powered by configuration-as-code-plugin. ",
    "url": "http://localhost:4000/user-guide#user-guide",
    "relUrl": "/user-guide#user-guide"
  },"31": {
    "doc": "User Guide",
    "title": "How you can access these actions in your project?",
    "content": "Reference these actions in your workflow definition. | Cr1t-GYM/jenkins-action-poc/jenkins-plugin-installation-action@master | Cr1t-GYM/jenkins-action-poc/jenkinsfile-runner-action@master | Cr1t-GYM/jenkins-action-poc/jenkins-setup@master | Cr1t-GYM/jenkins-action-poc/jfr-container-action@master | Cr1t-GYM/jenkins-action-poc/jfr-static-image-action@master | . ",
    "url": "http://localhost:4000/user-guide#how-you-can-access-these-actions-in-your-project",
    "relUrl": "/user-guide#how-you-can-access-these-actions-in-your-project"
  },"32": {
    "doc": "User Guide",
    "title": "User Guide",
    "content": " ",
    "url": "http://localhost:4000/user-guide",
    "relUrl": "/user-guide"
  }
}
